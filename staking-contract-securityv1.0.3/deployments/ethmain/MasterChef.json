{
  "address": "0x65b64CF7F3f3f89472a2421BdCdB5A0754B654dB",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20Mintable",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rewardPerBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startBlock",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousPendingOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newPendingOwner",
          "type": "address"
        }
      ],
      "name": "ChangePendingOwner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMultiplier",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMultiplier",
          "type": "uint256"
        }
      ],
      "name": "NewMultiplier",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalPoint",
          "type": "uint256"
        }
      ],
      "name": "NewPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldReward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newReward",
          "type": "uint256"
        }
      ],
      "name": "NewRewardPerBlock",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BONUS_MULTIPLIER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "existsLP",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_to",
          "type": "uint256"
        }
      ],
      "name": "getMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "massUpdatePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pending",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pidOfLP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accPerShare",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20Mintable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pendingOwner_",
          "type": "address"
        }
      ],
      "name": "setPendingOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAllocPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "multiplierNumber",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "withUpdate",
          "type": "bool"
        }
      ],
      "name": "updateMultiplier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rewardPerBlock",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "updateRewardPerBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2432c9d9ab06bdaae5f0726b6f5202f53d114de82843ea307fe3e90915953b22",
  "receipt": {
    "to": null,
    "from": "0x1C70Fb8De1e25E169d717f27C6396B8fC26BD26F",
    "contractAddress": "0x65b64CF7F3f3f89472a2421BdCdB5A0754B654dB",
    "transactionIndex": 155,
    "gasUsed": "1838133",
    "logsBloom": "0x
    "blockHash": "0xa978c91714ccb9b0ee1690db3e81e1175c71dd56286bf73b07498a515c95ac96",
    "transactionHash": "0x2432c9d9ab06bdaae5f0726b6f5202f53d114de82843ea307fe3e90915953b22",
    "logs": [
      {
        "transactionIndex": 155,
        "blockNumber": 14028904,
        "transactionHash": "0x2432c9d9ab06bdaae5f0726b6f5202f53d114de82843ea307fe3e90915953b22",
        "address": "0x65b64CF7F3f3f89472a2421BdCdB5A0754B654dB",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001c70fb8de1e25e169d717f27c6396b8fc26bd26f"
        ],
        "data": "0x",
        "logIndex": 189,
        "blockHash": "0xa978c91714ccb9b0ee1690db3e81e1175c71dd56286bf73b07498a515c95ac96"
      }
    ],
    "blockNumber": 14028904,
    "cumulativeGasUsed": "13219175",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x82ca5FCd9eF2D6cEEb49a057bb11c3E091560979",
    "0",
    14035085
  ],
  "solcInputHash": "b816599d5050323d6b3fafe71505a8f2",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20Mintable\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousPendingOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPendingOwner\",\"type\":\"address\"}],\"name\":\"ChangePendingOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMultiplier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMultiplier\",\"type\":\"uint256\"}],\"name\":\"NewMultiplier\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalPoint\",\"type\":\"uint256\"}],\"name\":\"NewPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newReward\",\"type\":\"uint256\"}],\"name\":\"NewRewardPerBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BONUS_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"existsLP\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pidOfLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accPerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20Mintable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pendingOwner_\",\"type\":\"address\"}],\"name\":\"setPendingOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"multiplierNumber\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withUpdate\",\"type\":\"bool\"}],\"name\":\"updateMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"updateRewardPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/farm/MasterChef.sol\":\"MasterChef\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"contracts/core/SafeOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport '@openzeppelin/contracts/utils/Context.sol';\\n\\n/**\\n * This is a contract copied from 'Ownable.sol'\\n * It has the same fundation of Ownable, besides it accept pendingOwner for mor Safe Use\\n */\\nabstract contract SafeOwnable is Context {\\n    address private _owner;\\n    address private _pendingOwner;\\n\\n    event ChangePendingOwner(address indexed previousPendingOwner, address indexed newPendingOwner);\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor (address _currentOwner) {\\n        if (_currentOwner == address(0)) {\\n            _currentOwner = _msgSender();\\n        }\\n        _owner = _currentOwner;\\n        emit OwnershipTransferred(address(0), _currentOwner);\\n    }\\n\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyPendingOwner() {\\n        require(pendingOwner() == _msgSender(), \\\"Ownable: caller is not the pendingOwner\\\");\\n        _;\\n    }\\n\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n        if (_pendingOwner != address(0)) {\\n            emit ChangePendingOwner(_pendingOwner, address(0));\\n            _pendingOwner = address(0);\\n        }\\n    }\\n\\n    function setPendingOwner(address pendingOwner_) public virtual onlyOwner {\\n        require(pendingOwner_ != address(0), \\\"Ownable: pendingOwner is the zero address\\\");\\n        emit ChangePendingOwner(_pendingOwner, pendingOwner_);\\n        _pendingOwner = pendingOwner_;\\n    }\\n\\n    function acceptOwner() public virtual onlyPendingOwner {\\n        emit OwnershipTransferred(_owner, _pendingOwner);\\n        _owner = _pendingOwner;\\n        emit ChangePendingOwner(_pendingOwner, address(0));\\n        _pendingOwner = address(0);\\n    }\\n}\\n\",\"keccak256\":\"0xaf78aa86cbf2a1646c04c3e5e337a3bf030a88ac4011cc6b53f101e3aaf1a515\",\"license\":\"MIT\"},\"contracts/farm/MasterChef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport '@openzeppelin/contracts/utils/ReentrancyGuard.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport \\\"../interfaces/IERC20Mintable.sol\\\";\\nimport '../core/SafeOwnable.sol';\\n\\ncontract MasterChef is SafeOwnable, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    struct UserInfo {\\n        uint256 amount;     \\n        uint256 rewardDebt; \\n    }\\n\\n    struct PoolInfo {\\n        IERC20 lpToken;           \\n        uint256 allocPoint;       \\n        uint256 lastRewardBlock;  \\n        uint256 accPerShare; \\n    }\\n\\n    IERC20Mintable public rewardToken;\\n    uint256 public rewardPerBlock;\\n    uint256 public BONUS_MULTIPLIER;\\n\\n    // Info of each pool.\\n    PoolInfo[] public poolInfo;\\n    mapping(address => uint256) public pidOfLP;\\n    mapping(address => bool) public existsLP;\\n    // Info of each user that stakes LP tokens.\\n    mapping (uint256 => mapping (address => UserInfo)) public userInfo;\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n    // The block number when CAKE mining starts.\\n    uint256 public startBlock;\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event NewRewardPerBlock(uint oldReward, uint newReward);\\n    event NewMultiplier(uint oldMultiplier, uint newMultiplier);\\n    event NewPool(uint pid, address lpToken, uint allocPoint, uint totalPoint);\\n\\n    modifier validatePoolByPid(uint256 _pid) {\\n        require (_pid < poolInfo.length, \\\"Pool does not exist\\\");\\n        _;\\n    }\\n\\n    constructor (\\n        IERC20Mintable _rewardToken,\\n        uint256 _rewardPerBlock,\\n        uint256 _startBlock\\n    ) SafeOwnable (msg.sender) {\\n        require(address(_rewardToken) != address(0), \\\"illegal rewardToken\\\");\\n        rewardToken = _rewardToken;\\n        rewardPerBlock = _rewardPerBlock;\\n        startBlock = _startBlock;\\n        BONUS_MULTIPLIER = 1;\\n    }\\n\\n    function updateMultiplier(uint256 multiplierNumber, bool withUpdate) external onlyOwner {\\n        if (withUpdate) {\\n            massUpdatePools();\\n        }\\n        emit NewMultiplier(BONUS_MULTIPLIER, multiplierNumber);\\n        BONUS_MULTIPLIER = multiplierNumber;\\n    }\\n\\n    function updateRewardPerBlock(uint256 _rewardPerBlock, bool _withUpdate) external onlyOwner {\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        emit NewRewardPerBlock(rewardPerBlock, _rewardPerBlock);\\n        rewardPerBlock = _rewardPerBlock;\\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    function add(uint256 _allocPoint, IERC20 _lpToken, bool _withUpdate) external onlyOwner {\\n        require(address(_lpToken) != address(rewardToken), \\\"can not add reward\\\");\\n        require(!existsLP[address(_lpToken)], \\\"lp already exist\\\");\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n        pidOfLP[address(_lpToken)] = poolInfo.length;\\n        existsLP[address(_lpToken)] = true;\\n        poolInfo.push(PoolInfo({\\n            lpToken: _lpToken,\\n            allocPoint: _allocPoint,\\n            lastRewardBlock: lastRewardBlock,\\n            accPerShare: 0\\n        }));\\n        emit NewPool(poolInfo.length - 1, address(_lpToken), _allocPoint, totalAllocPoint);\\n    }\\n\\n    function set(uint256 _pid, uint256 _allocPoint, bool _withUpdate) external onlyOwner validatePoolByPid(_pid) {\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        uint256 prevAllocPoint = poolInfo[_pid].allocPoint;\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n        if (prevAllocPoint != _allocPoint) {\\n            totalAllocPoint = totalAllocPoint.sub(prevAllocPoint).add(_allocPoint);\\n        }\\n        emit NewPool(_pid, address(poolInfo[_pid].lpToken), _allocPoint, totalAllocPoint);\\n    }\\n\\n    function getMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\\n        return _to.sub(_from).mul(BONUS_MULTIPLIER);\\n    }\\n\\n    function pending(uint256 _pid, address _user) external validatePoolByPid(_pid) view returns (uint256) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 accPerShare = pool.accPerShare;\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\\n            uint256 rewardReward = multiplier.mul(rewardPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\\n            accPerShare = accPerShare.add(rewardReward.mul(1e12).div(lpSupply));\\n        }\\n        return user.amount.mul(accPerShare).div(1e12).sub(user.rewardDebt);\\n    }\\n\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    function updatePool(uint256 _pid) public validatePoolByPid(_pid) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (block.number <= pool.lastRewardBlock) {\\n            return;\\n        }\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\n        if (lpSupply == 0) {\\n            pool.lastRewardBlock = block.number;\\n            return;\\n        }\\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\\n        uint256 rewardReward = multiplier.mul(rewardPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\\n        rewardReward = rewardToken.mint(address(this), rewardReward);\\n        pool.accPerShare = pool.accPerShare.add(rewardReward.mul(1e12).div(lpSupply));\\n        pool.lastRewardBlock = block.number;\\n    }\\n\\n    function deposit(uint256 _pid, uint256 _amount) external nonReentrant validatePoolByPid(_pid) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        updatePool(_pid);\\n        if (user.amount > 0) {\\n            uint256 pendingAmount = user.amount.mul(pool.accPerShare).div(1e12).sub(user.rewardDebt);\\n            if(pendingAmount > 0) {\\n                safeRewardTransfer(msg.sender, pendingAmount);\\n            }\\n        }\\n        if (_amount > 0) {\\n            pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\\n            user.amount = user.amount.add(_amount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accPerShare).div(1e12);\\n        emit Deposit(msg.sender, _pid, _amount);\\n    }\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external nonReentrant validatePoolByPid(_pid) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        require(user.amount >= _amount, \\\"withdraw: not good\\\");\\n        updatePool(_pid);\\n        uint256 pendingAmount = user.amount.mul(pool.accPerShare).div(1e12).sub(user.rewardDebt);\\n        if(pendingAmount > 0) {\\n            safeRewardTransfer(msg.sender, pendingAmount);\\n        }\\n        if(_amount > 0) {\\n            user.amount = user.amount.sub(_amount);\\n            pool.lpToken.safeTransfer(address(msg.sender), _amount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accPerShare).div(1e12);\\n        emit Withdraw(msg.sender, _pid, _amount);\\n    }\\n\\n    function emergencyWithdraw(uint256 _pid) external nonReentrant validatePoolByPid(_pid) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        uint amount = user.amount;\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n        pool.lpToken.safeTransfer(address(msg.sender), amount);\\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\\n    }\\n\\n    function safeRewardTransfer(address _to, uint256 _amount) internal {\\n        uint currentBalance = IERC20(rewardToken).balanceOf(address(this));\\n        if (currentBalance < _amount) {\\n            _amount = currentBalance;\\n        }\\n        IERC20(rewardToken).safeTransfer(_to, _amount);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x984d36876e96be8a5be11698a1b96442a8bc6c9f620cd509bea7a73d57436e0d\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IERC20Mintable is IERC20 {\\n\\n    function mint(address to, uint256 amount) external returns (uint);\\n\\n}\\n\",\"keccak256\":\"0xe58477c0dcb8357dc30513321075b3f6807c88bd0ec3bb2a6e20ab70860a7968\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526000600a5534801561001557600080fd5b5060405162001f5c38038062001f5c8339818101604052606081101561003a57600080fd5b5080516020820151604090920151909190338061005c57610059610136565b90505b600080546001600160a01b0319166001600160a01b03831690811782556040519091907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35060016002556001600160a01b038316610105576040805162461bcd60e51b815260206004820152601360248201527f696c6c6567616c20726577617264546f6b656e00000000000000000000000000604482015290519081900360640190fd5b600380546001600160a01b0319166001600160a01b039490941693909317909255600455600b55600160055561013a565b3390565b611e12806200014a6000396000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c80638ae39cac116100de578063bf65476811610097578063e30c397811610071578063e30c397814610467578063e4c75c271461046f578063ebbc49651461049b578063f7c618c1146104a35761018e565b8063bf654768146103f9578063c42069ec1461041e578063e2bbb158146104445761018e565b80638ae39cac1461031a5780638da5cb5b146103225780638dbb1e3a1461034657806393f1a40b14610369578063ae485c1b146103ae578063be4218ee146103d35761018e565b806351eb05a61161014b578063630b5ba111610125578063630b5ba1146102d757806364482f79146102df578063715018a61461030a5780638aa28550146103125761018e565b806351eb05a6146102635780635312ea8e14610280578063610b0a5f1461029d5761018e565b8063081e3eda146101935780631526fe27146101ad57806317caf6f1146101fa5780631eaaa04514610202578063441a3e701461023857806348cd4cb11461025b575b600080fd5b61019b6104ab565b60408051918252519081900360200190f35b6101ca600480360360208110156101c357600080fd5b50356104b1565b604080516001600160a01b0390951685526020850193909352838301919091526060830152519081900360800190f35b61019b6104f5565b6102366004803603606081101561021857600080fd5b508035906001600160a01b03602082013516906040013515156104fb565b005b6102366004803603604081101561024e57600080fd5b50803590602001356107b7565b61019b6109c5565b6102366004803603602081101561027957600080fd5b50356109cb565b6102366004803603602081101561029657600080fd5b5035610bcd565b6102c3600480360360208110156102b357600080fd5b50356001600160a01b0316610d18565b604080519115158252519081900360200190f35b610236610d2d565b610236600480360360608110156102f557600080fd5b50803590602081013590604001351515610d4c565b610236610ef6565b61019b610ffc565b61019b611002565b61032a611008565b604080516001600160a01b039092168252519081900360200190f35b61019b6004803603604081101561035c57600080fd5b5080359060200135611017565b6103956004803603604081101561037f57600080fd5b50803590602001356001600160a01b0316611034565b6040805192835260208301919091528051918290030190f35b610236600480360360408110156103c457600080fd5b50803590602001351515611058565b61019b600480360360208110156103e957600080fd5b50356001600160a01b031661110b565b6102366004803603604081101561040f57600080fd5b5080359060200135151561111d565b6102366004803603602081101561043457600080fd5b50356001600160a01b03166111d0565b6102366004803603604081101561045a57600080fd5b50803590602001356112d3565b61032a611494565b61019b6004803603604081101561048557600080fd5b50803590602001356001600160a01b03166114a3565b610236611656565b61032a61174f565b60065490565b600681815481106104c157600080fd5b600091825260209091206004909102018054600182015460028301546003909301546001600160a01b039092169350919084565b600a5481565b61050361175e565b6001600160a01b0316610514611008565b6001600160a01b03161461055d576040805162461bcd60e51b81526020600482018190526024820152600080516020611d43833981519152604482015290519081900360640190fd5b6003546001600160a01b03838116911614156105b5576040805162461bcd60e51b815260206004820152601260248201527118d85b881b9bdd08185919081c995dd85c9960721b604482015290519081900360640190fd5b6001600160a01b03821660009081526008602052604090205460ff1615610616576040805162461bcd60e51b815260206004820152601060248201526f1b1c08185b1c9958591e48195e1a5cdd60821b604482015290519081900360640190fd5b801561062457610624610d2d565b6000600b54431161063757600b54610639565b435b600a549091506106499085611762565b600a908155600680546001600160a01b03868116600081815260076020908152604080832095909555600881528482208054600160ff1990911681179091558551608080820188528582528184018e81528289018c815260608085018881528c549687018d55978c905293517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f600490960295860180546001600160a01b03191691909a1617909855517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4084015595517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4183015592517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d429091015594549554845160001997909701875294860191909152848301899052840192909252517fd194e96f60e9745052f77b89a5ee23392770de5846609447847ddcc5868cf55b9281900390910190a150505050565b60028054141561080e576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002805560065482908110610860576040805162461bcd60e51b8152602060048201526013602482015272141bdbdb08191bd95cc81b9bdd08195e1a5cdd606a1b604482015290519081900360640190fd5b60006006848154811061086f57fe5b6000918252602080832087845260098252604080852033865290925292208054600490920290920192508411156108e2576040805162461bcd60e51b81526020600482015260126024820152711dda5d1a191c985dce881b9bdd0819dbdbd960721b604482015290519081900360640190fd5b6108eb856109cb565b6000610925826001015461091f64e8d4a51000610919876003015487600001546117bc90919063ffffffff16565b90611815565b9061187c565b905080156109375761093733826118d9565b8415610961578154610949908661187c565b82558254610961906001600160a01b0316338761197a565b6003830154825461097c9164e8d4a5100091610919916117bc565b6001830155604080518681529051879133917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689181900360200190a35050600160025550505050565b600b5481565b60065481908110610a19576040805162461bcd60e51b8152602060048201526013602482015272141bdbdb08191bd95cc81b9bdd08195e1a5cdd606a1b604482015290519081900360640190fd5b600060068381548110610a2857fe5b9060005260206000209060040201905080600201544311610a495750610bc9565b8054604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015610a9357600080fd5b505afa158015610aa7573d6000803e3d6000fd5b505050506040513d6020811015610abd57600080fd5b5051905080610ad3575043600290910155610bc9565b6000610ae3836002015443611017565b90506000610b10600a546109198660010154610b0a600454876117bc90919063ffffffff16565b906117bc565b600354604080516340c10f1960e01b81523060048201526024810184905290519293506001600160a01b03909116916340c10f19916044808201926020929091908290030181600087803b158015610b6757600080fd5b505af1158015610b7b573d6000803e3d6000fd5b505050506040513d6020811015610b9157600080fd5b50519050610bb6610bab846109198464e8d4a510006117bc565b600386015490611762565b6003850155505043600290920191909155505b5050565b600280541415610c24576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002805560065481908110610c76576040805162461bcd60e51b8152602060048201526013602482015272141bdbdb08191bd95cc81b9bdd08195e1a5cdd606a1b604482015290519081900360640190fd5b600060068381548110610c8557fe5b600091825260208083208684526009825260408085203380875293528420805485825560018201959095556004909302018054909450919291610cd5916001600160a01b0391909116908361197a565b604080518281529051869133917fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05959181900360200190a350506001600255505050565b60086020526000908152604090205460ff1681565b60065460005b81811015610bc957610d44816109cb565b600101610d33565b610d5461175e565b6001600160a01b0316610d65611008565b6001600160a01b031614610dae576040805162461bcd60e51b81526020600482018190526024820152600080516020611d43833981519152604482015290519081900360640190fd5b60065483908110610dfc576040805162461bcd60e51b8152602060048201526013602482015272141bdbdb08191bd95cc81b9bdd08195e1a5cdd606a1b604482015290519081900360640190fd5b8115610e0a57610e0a610d2d565b600060068581548110610e1957fe5b90600052602060002090600402016001015490508360068681548110610e3b57fe5b906000526020600020906004020160010181905550838114610e7a57610e7684610e7083600a5461187c90919063ffffffff16565b90611762565b600a555b7fd194e96f60e9745052f77b89a5ee23392770de5846609447847ddcc5868cf55b8560068781548110610ea957fe5b600091825260209182902060049091020154600a54604080519485526001600160a01b03909216928401929092528281018890526060830191909152519081900360800190a15050505050565b610efe61175e565b6001600160a01b0316610f0f611008565b6001600160a01b031614610f58576040805162461bcd60e51b81526020600482018190526024820152600080516020611d43833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b03191690556001546001600160a01b031615610ffa576001546040516000916001600160a01b0316907f4465959e7ec1f32e3ebd831ac2459ad6ef4b1d54a83f108a7068e69e62f0702f908390a3600180546001600160a01b03191690555b565b60055481565b60045481565b6000546001600160a01b031690565b60055460009061102b90610b0a848661187c565b90505b92915050565b60096020908152600092835260408084209091529082529020805460019091015482565b61106061175e565b6001600160a01b0316611071611008565b6001600160a01b0316146110ba576040805162461bcd60e51b81526020600482018190526024820152600080516020611d43833981519152604482015290519081900360640190fd5b80156110c8576110c8610d2d565b600454604080519182526020820184905280517f3b7a406bf2b66d0f83f6b1cf4c39edf1269cad80712b94cd80a44d13f61f13579281900390910190a150600455565b60076020526000908152604090205481565b61112561175e565b6001600160a01b0316611136611008565b6001600160a01b03161461117f576040805162461bcd60e51b81526020600482018190526024820152600080516020611d43833981519152604482015290519081900360640190fd5b801561118d5761118d610d2d565b600554604080519182526020820184905280517fbb69b052a57be2126300a5702ad98a79ab8ac71f0d3f61df1fde7e4c681433439281900390910190a150600555565b6111d861175e565b6001600160a01b03166111e9611008565b6001600160a01b031614611232576040805162461bcd60e51b81526020600482018190526024820152600080516020611d43833981519152604482015290519081900360640190fd5b6001600160a01b0381166112775760405162461bcd60e51b8152600401808060200182810382526029815260200180611db46029913960400191505060405180910390fd5b6001546040516001600160a01b038084169216907f4465959e7ec1f32e3ebd831ac2459ad6ef4b1d54a83f108a7068e69e62f0702f90600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b60028054141561132a576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600280556006548290811061137c576040805162461bcd60e51b8152602060048201526013602482015272141bdbdb08191bd95cc81b9bdd08195e1a5cdd606a1b604482015290519081900360640190fd5b60006006848154811061138b57fe5b600091825260208083208784526009825260408085203386529092529220600490910290910191506113bc856109cb565b8054156114055760006113f1826001015461091f64e8d4a51000610919876003015487600001546117bc90919063ffffffff16565b905080156114035761140333826118d9565b505b8315611431578154611422906001600160a01b03163330876119cc565b805461142e9085611762565b81555b6003820154815461144c9164e8d4a5100091610919916117bc565b6001820155604080518581529051869133917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159181900360200190a350506001600255505050565b6001546001600160a01b031690565b600654600090839081106114f4576040805162461bcd60e51b8152602060048201526013602482015272141bdbdb08191bd95cc81b9bdd08195e1a5cdd606a1b604482015290519081900360640190fd5b60006006858154811061150357fe5b600091825260208083208884526009825260408085206001600160a01b038a8116875290845281862060049586029093016003810154815484516370a0823160e01b81523098810198909852935191985093969395939492909116926370a08231926024808301939192829003018186803b15801561158157600080fd5b505afa158015611595573d6000803e3d6000fd5b505050506040513d60208110156115ab57600080fd5b50516002850154909150431180156115c257508015155b156116225760006115d7856002015443611017565b905060006115fe600a546109198860010154610b0a600454876117bc90919063ffffffff16565b905061161d611616846109198464e8d4a510006117bc565b8590611762565b935050505b61164a836001015461091f64e8d4a510006109198688600001546117bc90919063ffffffff16565b98975050505050505050565b61165e61175e565b6001600160a01b031661166f611494565b6001600160a01b0316146116b45760405162461bcd60e51b8152600401808060200182810382526027815260200180611d636027913960400191505060405180910390fd5b600154600080546040516001600160a01b0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600154600080546001600160a01b0319166001600160a01b0390921691821781556040519091907f4465959e7ec1f32e3ebd831ac2459ad6ef4b1d54a83f108a7068e69e62f0702f908390a3600180546001600160a01b0319169055565b6003546001600160a01b031681565b3390565b60008282018381101561102b576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000826117cb5750600061102e565b828202828482816117d857fe5b041461102b5760405162461bcd60e51b8152600401808060200182810382526021815260200180611d226021913960400191505060405180910390fd5b600080821161186b576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161187457fe5b049392505050565b6000828211156118d3576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600354604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561192457600080fd5b505afa158015611938573d6000803e3d6000fd5b505050506040513d602081101561194e57600080fd5b505190508181101561195e578091505b600354611975906001600160a01b0316848461197a565b505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611975908490611a2c565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052611a26908590611a2c565b50505050565b6000611a81826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611add9092919063ffffffff16565b80519091501561197557808060200190516020811015611aa057600080fd5b50516119755760405162461bcd60e51b815260040180806020018281038252602a815260200180611d8a602a913960400191505060405180910390fd5b6060611aec8484600085611af6565b90505b9392505050565b606082471015611b375760405162461bcd60e51b8152600401808060200182810382526026815260200180611cfc6026913960400191505060405180910390fd5b611b4085611c51565b611b91576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b60208310611bcf5780518252601f199092019160209182019101611bb0565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611c31576040519150601f19603f3d011682016040523d82523d6000602084013e611c36565b606091505b5091509150611c46828286611c57565b979650505050505050565b3b151590565b60608315611c66575081611aef565b825115611c765782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611cc0578181015183820152602001611ca8565b50505050905090810190601f168015611ced5780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65724f776e61626c653a2063616c6c6572206973206e6f74207468652070656e64696e674f776e65725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565644f776e61626c653a2070656e64696e674f776e657220697320746865207a65726f2061646472657373a26469706673582212203886023ae77d0b04d283b62b50ff7398f90319ebeb04ab083da7a7f7186fad5364736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018e5760003560e01c80638ae39cac116100de578063bf65476811610097578063e30c397811610071578063e30c397814610467578063e4c75c271461046f578063ebbc49651461049b578063f7c618c1146104a35761018e565b8063bf654768146103f9578063c42069ec1461041e578063e2bbb158146104445761018e565b80638ae39cac1461031a5780638da5cb5b146103225780638dbb1e3a1461034657806393f1a40b14610369578063ae485c1b146103ae578063be4218ee146103d35761018e565b806351eb05a61161014b578063630b5ba111610125578063630b5ba1146102d757806364482f79146102df578063715018a61461030a5780638aa28550146103125761018e565b806351eb05a6146102635780635312ea8e14610280578063610b0a5f1461029d5761018e565b8063081e3eda146101935780631526fe27146101ad57806317caf6f1146101fa5780631eaaa04514610202578063441a3e701461023857806348cd4cb11461025b575b600080fd5b61019b6104ab565b60408051918252519081900360200190f35b6101ca600480360360208110156101c357600080fd5b50356104b1565b604080516001600160a01b0390951685526020850193909352838301919091526060830152519081900360800190f35b61019b6104f5565b6102366004803603606081101561021857600080fd5b508035906001600160a01b03602082013516906040013515156104fb565b005b6102366004803603604081101561024e57600080fd5b50803590602001356107b7565b61019b6109c5565b6102366004803603602081101561027957600080fd5b50356109cb565b6102366004803603602081101561029657600080fd5b5035610bcd565b6102c3600480360360208110156102b357600080fd5b50356001600160a01b0316610d18565b604080519115158252519081900360200190f35b610236610d2d565b610236600480360360608110156102f557600080fd5b50803590602081013590604001351515610d4c565b610236610ef6565b61019b610ffc565b61019b611002565b61032a611008565b604080516001600160a01b039092168252519081900360200190f35b61019b6004803603604081101561035c57600080fd5b5080359060200135611017565b6103956004803603604081101561037f57600080fd5b50803590602001356001600160a01b0316611034565b6040805192835260208301919091528051918290030190f35b610236600480360360408110156103c457600080fd5b50803590602001351515611058565b61019b600480360360208110156103e957600080fd5b50356001600160a01b031661110b565b6102366004803603604081101561040f57600080fd5b5080359060200135151561111d565b6102366004803603602081101561043457600080fd5b50356001600160a01b03166111d0565b6102366004803603604081101561045a57600080fd5b50803590602001356112d3565b61032a611494565b61019b6004803603604081101561048557600080fd5b50803590602001356001600160a01b03166114a3565b610236611656565b61032a61174f565b60065490565b600681815481106104c157600080fd5b600091825260209091206004909102018054600182015460028301546003909301546001600160a01b039092169350919084565b600a5481565b61050361175e565b6001600160a01b0316610514611008565b6001600160a01b03161461055d576040805162461bcd60e51b81526020600482018190526024820152600080516020611d43833981519152604482015290519081900360640190fd5b6003546001600160a01b03838116911614156105b5576040805162461bcd60e51b815260206004820152601260248201527118d85b881b9bdd08185919081c995dd85c9960721b604482015290519081900360640190fd5b6001600160a01b03821660009081526008602052604090205460ff1615610616576040805162461bcd60e51b815260206004820152601060248201526f1b1c08185b1c9958591e48195e1a5cdd60821b604482015290519081900360640190fd5b801561062457610624610d2d565b6000600b54431161063757600b54610639565b435b600a549091506106499085611762565b600a908155600680546001600160a01b03868116600081815260076020908152604080832095909555600881528482208054600160ff1990911681179091558551608080820188528582528184018e81528289018c815260608085018881528c549687018d55978c905293517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f600490960295860180546001600160a01b03191691909a1617909855517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4084015595517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4183015592517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d429091015594549554845160001997909701875294860191909152848301899052840192909252517fd194e96f60e9745052f77b89a5ee23392770de5846609447847ddcc5868cf55b9281900390910190a150505050565b60028054141561080e576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002805560065482908110610860576040805162461bcd60e51b8152602060048201526013602482015272141bdbdb08191bd95cc81b9bdd08195e1a5cdd606a1b604482015290519081900360640190fd5b60006006848154811061086f57fe5b6000918252602080832087845260098252604080852033865290925292208054600490920290920192508411156108e2576040805162461bcd60e51b81526020600482015260126024820152711dda5d1a191c985dce881b9bdd0819dbdbd960721b604482015290519081900360640190fd5b6108eb856109cb565b6000610925826001015461091f64e8d4a51000610919876003015487600001546117bc90919063ffffffff16565b90611815565b9061187c565b905080156109375761093733826118d9565b8415610961578154610949908661187c565b82558254610961906001600160a01b0316338761197a565b6003830154825461097c9164e8d4a5100091610919916117bc565b6001830155604080518681529051879133917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689181900360200190a35050600160025550505050565b600b5481565b60065481908110610a19576040805162461bcd60e51b8152602060048201526013602482015272141bdbdb08191bd95cc81b9bdd08195e1a5cdd606a1b604482015290519081900360640190fd5b600060068381548110610a2857fe5b9060005260206000209060040201905080600201544311610a495750610bc9565b8054604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015610a9357600080fd5b505afa158015610aa7573d6000803e3d6000fd5b505050506040513d6020811015610abd57600080fd5b5051905080610ad3575043600290910155610bc9565b6000610ae3836002015443611017565b90506000610b10600a546109198660010154610b0a600454876117bc90919063ffffffff16565b906117bc565b600354604080516340c10f1960e01b81523060048201526024810184905290519293506001600160a01b03909116916340c10f19916044808201926020929091908290030181600087803b158015610b6757600080fd5b505af1158015610b7b573d6000803e3d6000fd5b505050506040513d6020811015610b9157600080fd5b50519050610bb6610bab846109198464e8d4a510006117bc565b600386015490611762565b6003850155505043600290920191909155505b5050565b600280541415610c24576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002805560065481908110610c76576040805162461bcd60e51b8152602060048201526013602482015272141bdbdb08191bd95cc81b9bdd08195e1a5cdd606a1b604482015290519081900360640190fd5b600060068381548110610c8557fe5b600091825260208083208684526009825260408085203380875293528420805485825560018201959095556004909302018054909450919291610cd5916001600160a01b0391909116908361197a565b604080518281529051869133917fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05959181900360200190a350506001600255505050565b60086020526000908152604090205460ff1681565b60065460005b81811015610bc957610d44816109cb565b600101610d33565b610d5461175e565b6001600160a01b0316610d65611008565b6001600160a01b031614610dae576040805162461bcd60e51b81526020600482018190526024820152600080516020611d43833981519152604482015290519081900360640190fd5b60065483908110610dfc576040805162461bcd60e51b8152602060048201526013602482015272141bdbdb08191bd95cc81b9bdd08195e1a5cdd606a1b604482015290519081900360640190fd5b8115610e0a57610e0a610d2d565b600060068581548110610e1957fe5b90600052602060002090600402016001015490508360068681548110610e3b57fe5b906000526020600020906004020160010181905550838114610e7a57610e7684610e7083600a5461187c90919063ffffffff16565b90611762565b600a555b7fd194e96f60e9745052f77b89a5ee23392770de5846609447847ddcc5868cf55b8560068781548110610ea957fe5b600091825260209182902060049091020154600a54604080519485526001600160a01b03909216928401929092528281018890526060830191909152519081900360800190a15050505050565b610efe61175e565b6001600160a01b0316610f0f611008565b6001600160a01b031614610f58576040805162461bcd60e51b81526020600482018190526024820152600080516020611d43833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b03191690556001546001600160a01b031615610ffa576001546040516000916001600160a01b0316907f4465959e7ec1f32e3ebd831ac2459ad6ef4b1d54a83f108a7068e69e62f0702f908390a3600180546001600160a01b03191690555b565b60055481565b60045481565b6000546001600160a01b031690565b60055460009061102b90610b0a848661187c565b90505b92915050565b60096020908152600092835260408084209091529082529020805460019091015482565b61106061175e565b6001600160a01b0316611071611008565b6001600160a01b0316146110ba576040805162461bcd60e51b81526020600482018190526024820152600080516020611d43833981519152604482015290519081900360640190fd5b80156110c8576110c8610d2d565b600454604080519182526020820184905280517f3b7a406bf2b66d0f83f6b1cf4c39edf1269cad80712b94cd80a44d13f61f13579281900390910190a150600455565b60076020526000908152604090205481565b61112561175e565b6001600160a01b0316611136611008565b6001600160a01b03161461117f576040805162461bcd60e51b81526020600482018190526024820152600080516020611d43833981519152604482015290519081900360640190fd5b801561118d5761118d610d2d565b600554604080519182526020820184905280517fbb69b052a57be2126300a5702ad98a79ab8ac71f0d3f61df1fde7e4c681433439281900390910190a150600555565b6111d861175e565b6001600160a01b03166111e9611008565b6001600160a01b031614611232576040805162461bcd60e51b81526020600482018190526024820152600080516020611d43833981519152604482015290519081900360640190fd5b6001600160a01b0381166112775760405162461bcd60e51b8152600401808060200182810382526029815260200180611db46029913960400191505060405180910390fd5b6001546040516001600160a01b038084169216907f4465959e7ec1f32e3ebd831ac2459ad6ef4b1d54a83f108a7068e69e62f0702f90600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b60028054141561132a576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600280556006548290811061137c576040805162461bcd60e51b8152602060048201526013602482015272141bdbdb08191bd95cc81b9bdd08195e1a5cdd606a1b604482015290519081900360640190fd5b60006006848154811061138b57fe5b600091825260208083208784526009825260408085203386529092529220600490910290910191506113bc856109cb565b8054156114055760006113f1826001015461091f64e8d4a51000610919876003015487600001546117bc90919063ffffffff16565b905080156114035761140333826118d9565b505b8315611431578154611422906001600160a01b03163330876119cc565b805461142e9085611762565b81555b6003820154815461144c9164e8d4a5100091610919916117bc565b6001820155604080518581529051869133917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159181900360200190a350506001600255505050565b6001546001600160a01b031690565b600654600090839081106114f4576040805162461bcd60e51b8152602060048201526013602482015272141bdbdb08191bd95cc81b9bdd08195e1a5cdd606a1b604482015290519081900360640190fd5b60006006858154811061150357fe5b600091825260208083208884526009825260408085206001600160a01b038a8116875290845281862060049586029093016003810154815484516370a0823160e01b81523098810198909852935191985093969395939492909116926370a08231926024808301939192829003018186803b15801561158157600080fd5b505afa158015611595573d6000803e3d6000fd5b505050506040513d60208110156115ab57600080fd5b50516002850154909150431180156115c257508015155b156116225760006115d7856002015443611017565b905060006115fe600a546109198860010154610b0a600454876117bc90919063ffffffff16565b905061161d611616846109198464e8d4a510006117bc565b8590611762565b935050505b61164a836001015461091f64e8d4a510006109198688600001546117bc90919063ffffffff16565b98975050505050505050565b61165e61175e565b6001600160a01b031661166f611494565b6001600160a01b0316146116b45760405162461bcd60e51b8152600401808060200182810382526027815260200180611d636027913960400191505060405180910390fd5b600154600080546040516001600160a01b0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600154600080546001600160a01b0319166001600160a01b0390921691821781556040519091907f4465959e7ec1f32e3ebd831ac2459ad6ef4b1d54a83f108a7068e69e62f0702f908390a3600180546001600160a01b0319169055565b6003546001600160a01b031681565b3390565b60008282018381101561102b576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000826117cb5750600061102e565b828202828482816117d857fe5b041461102b5760405162461bcd60e51b8152600401808060200182810382526021815260200180611d226021913960400191505060405180910390fd5b600080821161186b576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161187457fe5b049392505050565b6000828211156118d3576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600354604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561192457600080fd5b505afa158015611938573d6000803e3d6000fd5b505050506040513d602081101561194e57600080fd5b505190508181101561195e578091505b600354611975906001600160a01b0316848461197a565b505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611975908490611a2c565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052611a26908590611a2c565b50505050565b6000611a81826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611add9092919063ffffffff16565b80519091501561197557808060200190516020811015611aa057600080fd5b50516119755760405162461bcd60e51b815260040180806020018281038252602a815260200180611d8a602a913960400191505060405180910390fd5b6060611aec8484600085611af6565b90505b9392505050565b606082471015611b375760405162461bcd60e51b8152600401808060200182810382526026815260200180611cfc6026913960400191505060405180910390fd5b611b4085611c51565b611b91576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b60208310611bcf5780518252601f199092019160209182019101611bb0565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611c31576040519150601f19603f3d011682016040523d82523d6000602084013e611c36565b606091505b5091509150611c46828286611c57565b979650505050505050565b3b151590565b60608315611c66575081611aef565b825115611c765782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611cc0578181015183820152602001611ca8565b50505050905090810190601f168015611ced5780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65724f776e61626c653a2063616c6c6572206973206e6f74207468652070656e64696e674f776e65725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565644f776e61626c653a2070656e64696e674f776e657220697320746865207a65726f2061646472657373a26469706673582212203886023ae77d0b04d283b62b50ff7398f90319ebeb04ab083da7a7f7186fad5364736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3297,
        "contract": "contracts/farm/MasterChef.sol:MasterChef",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3299,
        "contract": "contracts/farm/MasterChef.sol:MasterChef",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3260,
        "contract": "contracts/farm/MasterChef.sol:MasterChef",
        "label": "_status",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 3559,
        "contract": "contracts/farm/MasterChef.sol:MasterChef",
        "label": "rewardToken",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20Mintable)4513"
      },
      {
        "astId": 3561,
        "contract": "contracts/farm/MasterChef.sol:MasterChef",
        "label": "rewardPerBlock",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 3563,
        "contract": "contracts/farm/MasterChef.sol:MasterChef",
        "label": "BONUS_MULTIPLIER",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 3566,
        "contract": "contracts/farm/MasterChef.sol:MasterChef",
        "label": "poolInfo",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_struct(PoolInfo)3557_storage)dyn_storage"
      },
      {
        "astId": 3570,
        "contract": "contracts/farm/MasterChef.sol:MasterChef",
        "label": "pidOfLP",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3574,
        "contract": "contracts/farm/MasterChef.sol:MasterChef",
        "label": "existsLP",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3580,
        "contract": "contracts/farm/MasterChef.sol:MasterChef",
        "label": "userInfo",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3548_storage))"
      },
      {
        "astId": 3583,
        "contract": "contracts/farm/MasterChef.sol:MasterChef",
        "label": "totalAllocPoint",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 3585,
        "contract": "contracts/farm/MasterChef.sol:MasterChef",
        "label": "startBlock",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(PoolInfo)3557_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)3557_storage",
        "encoding": "dynamic_array",
        "label": "struct MasterChef.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)2225": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Mintable)4513": {
        "encoding": "inplace",
        "label": "contract IERC20Mintable",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(UserInfo)3548_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MasterChef.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)3548_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3548_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct MasterChef.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)3548_storage)"
      },
      "t_struct(PoolInfo)3557_storage": {
        "encoding": "inplace",
        "label": "struct MasterChef.PoolInfo",
        "members": [
          {
            "astId": 3550,
            "contract": "contracts/farm/MasterChef.sol:MasterChef",
            "label": "lpToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)2225"
          },
          {
            "astId": 3552,
            "contract": "contracts/farm/MasterChef.sol:MasterChef",
            "label": "allocPoint",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3554,
            "contract": "contracts/farm/MasterChef.sol:MasterChef",
            "label": "lastRewardBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3556,
            "contract": "contracts/farm/MasterChef.sol:MasterChef",
            "label": "accPerShare",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(UserInfo)3548_storage": {
        "encoding": "inplace",
        "label": "struct MasterChef.UserInfo",
        "members": [
          {
            "astId": 3545,
            "contract": "contracts/farm/MasterChef.sol:MasterChef",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3547,
            "contract": "contracts/farm/MasterChef.sol:MasterChef",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}